// Generated by Haxe 4.0.0-rc.1+1fdd3d59b
(function ($hx_exports, $global) { "use strict";
$hx_exports["RHEI"] = $hx_exports["RHEI"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if(((o) instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var rigid_common_MathUtil = $hx_exports["RHEI"]["MathUtil"] = function() { };
rigid_common_MathUtil.__name__ = true;
rigid_common_MathUtil.sin = function(v) {
	return Math.sin(v);
};
rigid_common_MathUtil.cos = function(v) {
	return Math.cos(v);
};
rigid_common_MathUtil.tan = function(v) {
	return Math.tan(v);
};
rigid_common_MathUtil.asin = function(v) {
	return Math.asin(v);
};
rigid_common_MathUtil.acos = function(v) {
	return Math.acos(v);
};
rigid_common_MathUtil.atan = function(v) {
	return Math.atan(v);
};
rigid_common_MathUtil.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
rigid_common_MathUtil.abs = function(v) {
	return Math.abs(v);
};
rigid_common_MathUtil.sqrt = function(v) {
	return Math.sqrt(v);
};
rigid_common_MathUtil.max = function(a,b) {
	return Math.max(a,b);
};
rigid_common_MathUtil.min = function(a,b) {
	return Math.min(a,b);
};
rigid_common_MathUtil.clamp = function(v,min,max) {
	return Math.min(Math.max(v,min),max);
};
rigid_common_MathUtil.rnd = function() {
	return Math.random();
};
var rigid_common__$Vec2_Vec2_$Impl_$ = $hx_exports["RHEI"]["Vec2"] = {};
rigid_common__$Vec2_Vec2_$Impl_$.__name__ = true;
rigid_common__$Vec2_Vec2_$Impl_$.get_x = function(this1) {
	return this1.x;
};
rigid_common__$Vec2_Vec2_$Impl_$.set_x = function(this1,x) {
	return this1.x = x;
};
rigid_common__$Vec2_Vec2_$Impl_$.get_y = function(this1) {
	return this1.y;
};
rigid_common__$Vec2_Vec2_$Impl_$.set_y = function(this1,y) {
	return this1.y = y;
};
rigid_common__$Vec2_Vec2_$Impl_$._new = function(x,y) {
	var this1 = { x : x, y : y};
	return this1;
};
rigid_common__$Vec2_Vec2_$Impl_$.init = function(this1,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this1.x = x;
	this1.y = y;
};
rigid_common__$Vec2_Vec2_$Impl_$.add = function(v1,v2) {
	var this1 = { x : v1.x + v2.x, y : v1.y + v2.y};
	return this1;
};
rigid_common__$Vec2_Vec2_$Impl_$.sub = function(v1,v2) {
	var this1 = { x : v1.x - v2.x, y : v1.y - v2.y};
	return this1;
};
rigid_common__$Vec2_Vec2_$Impl_$.scale = function(v,s) {
	var this1 = { x : v.x * s, y : v.y * s};
	return this1;
};
rigid_common__$Vec2_Vec2_$Impl_$.div = function(v,s) {
	var this1 = { x : v.x / s, y : v.y / s};
	return this1;
};
rigid_common__$Vec2_Vec2_$Impl_$.dot = function(v1,v2) {
	return v1.x * v2.x + v1.y * v2.y;
};
rigid_common__$Vec2_Vec2_$Impl_$.cross = function(v1,v2) {
	return v1.x * v2.y - v1.y * v2.x;
};
rigid_common__$Vec2_Vec2_$Impl_$.clone = function(this1) {
	var this2 = { x : this1.x, y : this1.y};
	return this2;
};
rigid_common__$Vec2_Vec2_$Impl_$.toString = function(this1) {
	return "[ " + this1.x + ", " + this1.y + " ]";
};
var rigid_common__$Vec3_Vec3_$Impl_$ = $hx_exports["RHEI"]["Vec3"] = {};
rigid_common__$Vec3_Vec3_$Impl_$.__name__ = true;
rigid_common__$Vec3_Vec3_$Impl_$.get_x = function(this1) {
	return this1.x;
};
rigid_common__$Vec3_Vec3_$Impl_$.set_x = function(this1,x) {
	return this1.x = x;
};
rigid_common__$Vec3_Vec3_$Impl_$.get_y = function(this1) {
	return this1.y;
};
rigid_common__$Vec3_Vec3_$Impl_$.set_y = function(this1,y) {
	return this1.y = y;
};
rigid_common__$Vec3_Vec3_$Impl_$.get_z = function(this1) {
	return this1.z;
};
rigid_common__$Vec3_Vec3_$Impl_$.set_z = function(this1,z) {
	return this1.z = z;
};
rigid_common__$Vec3_Vec3_$Impl_$._new = function(x,y,z) {
	var this1 = { x : x, y : y, z : z};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.init = function(this1,x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this1.x = x;
	this1.y = y;
	this1.z = z;
};
rigid_common__$Vec3_Vec3_$Impl_$.add = function(v1,v2) {
	var this1 = { x : v1.x + v2.x, y : v1.y + v2.y, z : v1.z + v2.z};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.sub = function(v1,v2) {
	var this1 = { x : v1.x - v2.x, y : v1.y - v2.y, z : v1.z - v2.z};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.scale = function(v,s) {
	var this1 = { x : v.x * s, y : v.y * s, z : v.z * s};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.div = function(v,s) {
	var this1 = { x : v.x / s, y : v.y / s, z : v.z / s};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.dot = function(v1,v2) {
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
};
rigid_common__$Vec3_Vec3_$Impl_$.cross = function(v1,v2) {
	var this1 = { x : v1.y * v2.z - v1.z * v2.y, y : v1.z * v2.x - v1.x * v2.z, z : v1.x * v2.y - v1.y * v2.x};
	return this1;
};
rigid_common__$Vec3_Vec3_$Impl_$.clone = function(this1) {
	var this2 = { x : this1.x, y : this1.y, z : this1.z};
	return this2;
};
rigid_common__$Vec3_Vec3_$Impl_$.toString = function(this1) {
	return "[ " + this1.x + ", " + this1.y + " ]";
};
var rigid_dynamics_World = $hx_exports["RHEI"]["World"] = function() {
	this.constraints = [];
	this.numBodies = 0;
	this.pairManager = new rigid_dynamics_collision_PairManager(rigid_dynamics_collision_broadphase_BroadPhaseKind.SweepAndPrune);
};
rigid_dynamics_World.__name__ = true;
rigid_dynamics_World.prototype = {
	addBody: function(body) {
		if(this.bodies == null) {
			this.bodies = body;
		} else {
			this.bodies.prev = body;
			body.next = this.bodies;
			this.bodies = body;
		}
		this.numBodies++;
		this.pairManager.broadPhase.addBody(this.bodies);
	}
	,removeBody: function(body) {
		if(body.prev != null) {
			body.prev.next = body.next;
		}
		if(body.next != null) {
			body.next.prev = body.prev;
		}
		if(body == this.bodies) {
			this.bodies = body.next;
		}
		body.prev = null;
		body.next = null;
		this.numBodies--;
		this.pairManager.broadPhase.removeBody(body);
	}
	,addConstraint: function(constraint) {
		this.constraints.push(constraint);
	}
	,removeConstraint: function(constraint) {
		HxOverrides.remove(this.constraints,constraint);
	}
	,step: function(dt) {
		var a = Date.now() / 1000;
		var a1 = Date.now() / 1000;
		var _this = this.pairManager;
		var _this1 = _this.broadPhase;
		if(_this1.pairs != null) {
			var pair = _this1.pairs;
			while(pair != null) {
				pair.prev = null;
				pair.next = null;
				pair.s1 = null;
				pair.s2 = null;
				pair = pair.next;
			}
			_this1.pairs = null;
			_this1.numPairs = 0;
		}
		_this.broadPhase.updatePairs();
		var pair1 = _this.broadPhase.pairs;
		while(pair1 != null) {
			var nextPair = pair1.next;
			var found = false;
			var shapeLink = pair1.s1.shapeLinks;
			while(shapeLink != null) {
				var nextShapeLink = shapeLink.next;
				if(shapeLink.theOtherShape == pair1.s2) {
					found = true;
				}
				shapeLink = nextShapeLink;
			}
			if(!found) {
				var contact = new rigid_dynamics_collision_Contact();
				contact.newContact = true;
				contact.s1 = pair1.s1;
				contact.s2 = pair1.s2;
				if(_this.contacts == null) {
					_this.contacts = contact;
				} else {
					_this.contacts.prev = contact;
					contact.next = _this.contacts;
					_this.contacts = contact;
				}
				_this.numContacts++;
				contact.attach();
			}
			pair1 = nextPair;
		}
		var b = Date.now() / 1000;
		util_Statistics.broadphaseProcessElapsedTime = (b - a1) * 1000;
		var a2 = Date.now() / 1000;
		var _this2 = this.pairManager;
		var contact1 = _this2.contacts;
		while(contact1 != null) {
			var nextContact = contact1.next;
			var touching;
			if(!contact1.newContact) {
				var aabb1 = contact1.s1.aabb;
				var aabb2 = contact1.s2.aabb;
				touching = aabb1.edgeMinX.pos < aabb2.edgeMaxX.pos && aabb2.edgeMinX.pos < aabb1.edgeMaxX.pos && aabb1.edgeMinY.pos < aabb2.edgeMaxY.pos && aabb2.edgeMinY.pos < aabb1.edgeMaxY.pos;
			} else {
				touching = true;
			}
			if(touching) {
				var _this3 = _this2.narrowPhase;
				var _g = contact1.s2.kind;
				var tmp;
				switch(contact1.s1.kind) {
				case "Sphere":
					switch(_g) {
					case "Sphere":
						tmp = _this3.sphereSphereDetector;
						break;
					}
					break;
				}
				_this3.detector.impl = tmp;
				var _g1 = contact1.s2.assigned;
				var _g11 = contact1.s1.assigned;
				if(_g11._hx_index == 0 && _g1._hx_index == 0) {
					var b1 = _g11.v;
					var b2 = _g1.v;
					contact1.constraint = _this3.detector.impl.detect(b1,b2);
				} else {
					throw new js__$Boot_HaxeError("Any body does not be assigned.");
				}
			} else {
				contact1.detach();
				if(contact1.prev != null) {
					contact1.prev.next = contact1.next;
				}
				if(contact1.next != null) {
					contact1.next.prev = contact1.prev;
				}
				if(contact1 == _this2.contacts) {
					_this2.contacts = contact1.next;
				}
				contact1.next = null;
				contact1.prev = null;
				contact1.constraint = null;
				_this2.numContacts--;
			}
			contact1.newContact = false;
			contact1 = nextContact;
		}
		var _g2 = 0;
		var _g12 = this.constraints;
		while(_g2 < _g12.length) {
			var c = _g12[_g2];
			++_g2;
			if(((c) instanceof rigid_dynamics_constraint_ContactConstraint)) {
				this.removeConstraint(c);
			}
		}
		var contact2 = this.pairManager.contacts;
		while(contact2 != null) {
			var nextContact1 = contact2.next;
			var _g3 = contact2.constraint;
			switch(_g3._hx_index) {
			case 0:
				var cc = _g3.v;
				this.constraints.push(cc);
				break;
			case 1:
				break;
			}
			contact2 = nextContact1;
		}
		var b3 = Date.now() / 1000;
		util_Statistics.narrowphaseProcessElapsedTime = (b3 - a2) * 1000;
		var a3 = Date.now() / 1000;
		var _g4 = 0;
		var _g13 = this.constraints;
		while(_g4 < _g13.length) {
			var c1 = _g13[_g4];
			++_g4;
			c1.presolve(dt);
		}
		var _g21 = 0;
		var _g31 = this.constraints;
		while(_g21 < _g31.length) {
			var c2 = _g31[_g21];
			++_g21;
			c2.solveMoment();
		}
		var b4 = Date.now() / 1000;
		util_Statistics.resolutionProcessElapsedTime = (b4 - a3) * 1000;
		var a4 = Date.now() / 1000;
		if(this.underGravity) {
			var body = this.bodies;
			while(body != null) {
				var b_ = body.transform.m;
				var a_ = b_ == 0 ? 0 : 1 / b_;
				if((a_ != 0 ? rigid_dynamics_body_BodyState.Dynamic : rigid_dynamics_body_BodyState.Static) == rigid_dynamics_body_BodyState.Dynamic) {
					var _g5 = body;
					var v = _g5.transform.p;
					var b_1 = _g5.transform.m;
					var a_1 = b_1 == 0 ? 0 : 1 / b_1;
					var s = a_1;
					var v1_x = v.x * s;
					var v1_y = v.y * s;
					var v2_x = 0.0;
					var v2_y = -50.0;
					var this1 = { x : v1_x + v2_x, y : v1_y + v2_y};
					var v1 = this1;
					var s1 = _g5.transform.m;
					var this2 = { x : v1.x * s1, y : v1.y * s1};
					_g5.transform.p = this2;
				}
				body = body.next;
			}
		}
		var body1 = this.bodies;
		while(body1 != null) {
			var b_2 = body1.transform.m;
			var a_2 = b_2 == 0 ? 0 : 1 / b_2;
			switch((a_2 != 0 ? rigid_dynamics_body_BodyState.Dynamic : rigid_dynamics_body_BodyState.Static)._hx_index) {
			case 0:
				var v11 = body1.transform.q;
				var v2 = body1.transform.p;
				var s2 = body1.transform.m;
				var v_x = v2.x / s2;
				var v_y = v2.y / s2;
				var v2_x1 = v_x * dt;
				var v2_y1 = v_y * dt;
				var this3 = { x : v11.x + v2_x1, y : v11.y + v2_y1};
				body1.transform.q = this3;
				var _g14 = body1.transform.qa;
				var a5 = body1.transform.pa;
				var a_3 = body1.transform.m;
				var b_3 = a_3 * body1.shape.get_inertia();
				var a_4 = b_3 == 0 ? 0 : 1 / b_3;
				var a_5 = a_4 * a5;
				var a_6 = a_5 * dt;
				body1.transform.qa = a_6 + _g14;
				body1.transform.qa %= 6.28318530717958;
				break;
			case 1:
				break;
			}
			body1.shape.calcAABB(body1.transform);
			body1 = body1.next;
		}
		var b5 = Date.now() / 1000;
		util_Statistics.integrationProcessElapsedTime = (b5 - a4) * 1000;
		var b6 = Date.now() / 1000;
		util_Statistics.totalElapsedTime = (b6 - a) * 1000;
	}
	,removeOldContacts: function() {
		var _g = 0;
		var _g1 = this.constraints;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(((c) instanceof rigid_dynamics_constraint_ContactConstraint)) {
				this.removeConstraint(c);
			}
		}
	}
	,__class__: rigid_dynamics_World
};
var rigid_dynamics_body_BodyState = $hxEnums["rigid.dynamics.body.BodyState"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"rigid.dynamics.body.BodyState",toString:$estr}
	,Static: {_hx_index:1,__enum__:"rigid.dynamics.body.BodyState",toString:$estr}
};
var rigid_dynamics_body_Body = $hx_exports["RHEI"]["Body"] = function(shape) {
	this.transform = new rigid_dynamics_body_Transform();
	this.shape = shape;
	switch(shape.assigned._hx_index) {
	case 0:
		throw new js__$Boot_HaxeError("Not allowed to assign the shape that has been already assigned.");
	case 1:
		shape.assigned = haxe_ds_Option.Some(this);
		break;
	}
};
rigid_dynamics_body_Body.__name__ = true;
rigid_dynamics_body_Body.prototype = {
	addTo: function(body) {
		if(body == null) {
			body = this;
		} else {
			body.prev = this;
			this.next = body;
			body = this;
		}
	}
	,removeFrom: function(body) {
		if(this.prev != null) {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
		if(this == body) {
			body = this.next;
		}
		this.prev = null;
		this.next = null;
	}
	,getShape: function() {
		return this.shape;
	}
	,getPosition: function() {
		return this.transform.q;
	}
	,setPosition: function(pos) {
		this.transform.q = pos;
	}
	,getRotation: function() {
		return this.transform.qa;
	}
	,setRotation: function(rad) {
		this.transform.qa = rad;
	}
	,getVelocity: function() {
		var v = this.transform.p;
		var b_ = this.transform.m;
		var a_ = b_ == 0 ? 0 : 1 / b_;
		var s = a_;
		var this1 = { x : v.x * s, y : v.y * s};
		return this1;
	}
	,setVelocity: function(vel) {
		var s = this.transform.m;
		var this1 = { x : vel.x * s, y : vel.y * s};
		this.transform.p = this1;
	}
	,setMass: function(mass) {
		var a_ = mass;
		var tmp = a_ * this.shape.get_inertia();
		this.transform.i = tmp;
		this.transform.m = mass;
	}
	,getMass: function() {
		return this.transform.m;
	}
	,getInertia: function() {
		var a_ = this.transform.m;
		return a_ * this.shape.get_inertia();
	}
	,getAABB: function() {
		return this.shape.aabb;
	}
	,getKind: function() {
		return this.shape.kind;
	}
	,__class__: rigid_dynamics_body_Body
};
var rigid_dynamics_body_Transform = function() {
	var this1 = { x : 0.0, y : 0.0};
	this.q = this1;
	this.qa = 0.0;
	var this2 = { x : 0.0, y : 0.0};
	this.p = this2;
	this.pa = 0.0;
	this.m = 0.0;
	this.i = 0.0;
};
rigid_dynamics_body_Transform.__name__ = true;
rigid_dynamics_body_Transform.prototype = {
	__class__: rigid_dynamics_body_Transform
};
var rigid_dynamics_body_shape_IShape = function() { };
rigid_dynamics_body_shape_IShape.__name__ = true;
rigid_dynamics_body_shape_IShape.prototype = {
	__class__: rigid_dynamics_body_shape_IShape
};
var rigid_dynamics_body_shape_Shape = $hx_exports["RHEI"]["Shape"] = function() {
	this.assigned = haxe_ds_Option.None;
	this.aabb = new rigid_dynamics_collision_broadphase_AABB();
	this.aabb.shape = this;
};
rigid_dynamics_body_shape_Shape.__name__ = true;
rigid_dynamics_body_shape_Shape.__interfaces__ = [rigid_dynamics_body_shape_IShape];
rigid_dynamics_body_shape_Shape.prototype = {
	get_inertia: function() {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,calcAABB: function(transform) {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,__class__: rigid_dynamics_body_shape_Shape
};
var rigid_dynamics_body_shape_ShapeLink = function() {
};
rigid_dynamics_body_shape_ShapeLink.__name__ = true;
rigid_dynamics_body_shape_ShapeLink.prototype = {
	attach: function(to) {
		if(to.shapeLinks == null) {
			to.shapeLinks = this;
		} else {
			to.shapeLinks.prev = this;
			this.next = to.shapeLinks;
			to.shapeLinks = this;
		}
	}
	,detach: function(from) {
		if(this.prev != null) {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
		if(this == from.shapeLinks) {
			from.shapeLinks = this.next;
		}
		this.prev = null;
		this.next = null;
	}
	,__class__: rigid_dynamics_body_shape_ShapeLink
};
var rigid_dynamics_body_shape_SphereShape = $hx_exports["RHEI"]["SphereShape"] = function(radius) {
	rigid_dynamics_body_shape_Shape.call(this);
	this.kind = "Sphere";
	this.radius = radius;
};
rigid_dynamics_body_shape_SphereShape.__name__ = true;
rigid_dynamics_body_shape_SphereShape.__super__ = rigid_dynamics_body_shape_Shape;
rigid_dynamics_body_shape_SphereShape.prototype = $extend(rigid_dynamics_body_shape_Shape.prototype,{
	get_inertia: function() {
		return 0.5 * this.radius * this.radius;
	}
	,calcAABB: function(transform) {
		var r_x = this.radius;
		var r_y = this.radius;
		var o = transform.q;
		this.aabb.edgeMaxX.pos = o.x + r_x;
		this.aabb.edgeMaxY.pos = o.y + r_y;
		this.aabb.edgeMinX.pos = o.x - r_x;
		this.aabb.edgeMinY.pos = o.y - r_y;
	}
	,__class__: rigid_dynamics_body_shape_SphereShape
});
var rigid_dynamics_collision_Contact = function() {
	this.constraint = haxe_ds_Option.None;
	this.link1 = new rigid_dynamics_body_shape_ShapeLink();
	this.link2 = new rigid_dynamics_body_shape_ShapeLink();
};
rigid_dynamics_collision_Contact.__name__ = true;
rigid_dynamics_collision_Contact.prototype = {
	attach: function() {
		this.link1.attach(this.s1);
		this.link2.attach(this.s2);
		this.link1.theOtherShape = this.s2;
		this.link2.theOtherShape = this.s1;
	}
	,detach: function() {
		this.link1.detach(this.s1);
		this.link2.detach(this.s2);
		this.link1.theOtherShape = null;
		this.link2.theOtherShape = null;
	}
	,__class__: rigid_dynamics_collision_Contact
};
var rigid_dynamics_collision_Pair = function() {
};
rigid_dynamics_collision_Pair.__name__ = true;
rigid_dynamics_collision_Pair.prototype = {
	__class__: rigid_dynamics_collision_Pair
};
var rigid_dynamics_collision_PairManager = function(type) {
	this.numContacts = 0;
	var tmp;
	switch(type._hx_index) {
	case 0:
		tmp = new rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase();
		break;
	case 1:
		tmp = new rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase();
		break;
	}
	this.broadPhase = tmp;
	this.narrowPhase = new rigid_dynamics_collision_narrowphase_NarrowPhase();
};
rigid_dynamics_collision_PairManager.__name__ = true;
rigid_dynamics_collision_PairManager.prototype = {
	__class__: rigid_dynamics_collision_PairManager
};
var rigid_dynamics_collision_broadphase_AABB = $hx_exports["RHEI"]["AABB"] = function() {
	var this1 = { aabb : this, pos : 0.0, entry : true};
	this.edgeMinX = this1;
	var this2 = { aabb : this, pos : 0.0, entry : false};
	this.edgeMaxX = this2;
	this.edgeMinX.theOther = this.edgeMaxX;
	this.edgeMaxX.theOther = this.edgeMinX;
	var this3 = { aabb : this, pos : 0.0, entry : true};
	this.edgeMinY = this3;
	var this4 = { aabb : this, pos : 0.0, entry : false};
	this.edgeMaxY = this4;
	this.edgeMinY.theOther = this.edgeMaxY;
	this.edgeMaxY.theOther = this.edgeMinY;
};
rigid_dynamics_collision_broadphase_AABB.__name__ = true;
rigid_dynamics_collision_broadphase_AABB.prototype = {
	getMinX: function() {
		return this.edgeMinX.pos;
	}
	,getMaxX: function() {
		return this.edgeMaxX.pos;
	}
	,getMinY: function() {
		return this.edgeMinY.pos;
	}
	,getMaxY: function() {
		return this.edgeMaxY.pos;
	}
	,__class__: rigid_dynamics_collision_broadphase_AABB
};
var rigid_dynamics_collision_broadphase_BroadPhase = function() {
	this.numPairs = 0;
	this.numBodies = 0;
};
rigid_dynamics_collision_broadphase_BroadPhase.__name__ = true;
rigid_dynamics_collision_broadphase_BroadPhase.prototype = {
	updatePairs: function() {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,addBody: function(body) {
		this.bodies = body;
		this.numBodies++;
		body.shape.calcAABB(body.transform);
	}
	,removeBody: function(body) {
		if(body == this.bodies) {
			this.bodies = body.next;
		}
		this.numBodies--;
	}
	,__class__: rigid_dynamics_collision_broadphase_BroadPhase
};
var rigid_dynamics_collision_broadphase_BroadPhaseKind = $hxEnums["rigid.dynamics.collision.broadphase.BroadPhaseKind"] = { __ename__ : true, __constructs__ : ["BruteForce","SweepAndPrune"]
	,BruteForce: {_hx_index:0,__enum__:"rigid.dynamics.collision.broadphase.BroadPhaseKind",toString:$estr}
	,SweepAndPrune: {_hx_index:1,__enum__:"rigid.dynamics.collision.broadphase.BroadPhaseKind",toString:$estr}
};
var rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase = function() {
	rigid_dynamics_collision_broadphase_BroadPhase.call(this);
};
rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase.__name__ = true;
rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase.__super__ = rigid_dynamics_collision_broadphase_BroadPhase;
rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase.prototype = $extend(rigid_dynamics_collision_broadphase_BroadPhase.prototype,{
	updatePairs: function() {
		var i = 1;
		var b1 = this.bodies.next;
		while(i++ < this.numBodies) {
			var j = 0;
			var b2 = this.bodies;
			while(j++ < i) {
				var aabb1 = b1.shape.aabb;
				var aabb2 = b2.shape.aabb;
				if(aabb1.edgeMinX.pos < aabb2.edgeMaxX.pos && aabb2.edgeMinX.pos < aabb1.edgeMaxX.pos && aabb1.edgeMinY.pos < aabb2.edgeMaxY.pos && aabb2.edgeMinY.pos < aabb1.edgeMaxY.pos) {
					var pair = new rigid_dynamics_collision_Pair();
					pair.s1 = b1.shape;
					pair.s2 = b2.shape;
					if(this.pairs == null) {
						this.pairs = pair;
					} else {
						this.pairs.prev = pair;
						pair.next = this.pairs;
						this.pairs = pair;
					}
					this.numPairs++;
				}
				b2 = b2.next;
			}
			b1 = b1.next;
		}
	}
	,__class__: rigid_dynamics_collision_broadphase_bruteforce_BruteForceBroadPhase
});
var rigid_dynamics_collision_broadphase_sweepandprune__$AABBEdgeList_AABBEdgeList_$Impl_$ = {};
rigid_dynamics_collision_broadphase_sweepandprune__$AABBEdgeList_AABBEdgeList_$Impl_$.__name__ = true;
rigid_dynamics_collision_broadphase_sweepandprune__$AABBEdgeList_AABBEdgeList_$Impl_$.sort = function(this1) {
	var c = 0;
	var _g = 1;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = this1[i];
		if(this1[i - 1].pos > tmp.pos) {
			var j = i;
			while(true) {
				this1[j--] = this1[j];
				++c;
				if(!(j > 0 && this1[j - 1].pos > tmp.pos)) {
					break;
				}
			}
			this1[j] = tmp;
		}
	}
};
var rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase = function() {
	rigid_dynamics_collision_broadphase_BroadPhase.call(this);
	var this1 = [];
	this.axisX = this1;
	var this2 = [];
	this.axisY = this2;
	this.activeAABBs = [];
};
rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase.__name__ = true;
rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase.__super__ = rigid_dynamics_collision_broadphase_BroadPhase;
rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase.prototype = $extend(rigid_dynamics_collision_broadphase_BroadPhase.prototype,{
	addBody: function(body) {
		rigid_dynamics_collision_broadphase_BroadPhase.prototype.addBody.call(this,body);
		var this1 = this.axisX;
		var edge = body.shape.aabb.edgeMinX;
		edge.id = this1.length;
		this1.push(edge);
		var this2 = this.axisY;
		var edge1 = body.shape.aabb.edgeMinY;
		edge1.id = this2.length;
		this2.push(edge1);
		var this3 = this.axisX;
		var edge2 = body.shape.aabb.edgeMaxX;
		edge2.id = this3.length;
		this3.push(edge2);
		var this4 = this.axisY;
		var edge3 = body.shape.aabb.edgeMaxY;
		edge3.id = this4.length;
		this4.push(edge3);
	}
	,removeBody: function(body) {
		rigid_dynamics_collision_broadphase_BroadPhase.prototype.removeBody.call(this,body);
		var this1 = this.axisX;
		var edge = body.shape.aabb.edgeMinX;
		(this1[edge.id] = this1.pop()).id = edge.id;
		edge.id = null;
		var this2 = this.axisY;
		var edge1 = body.shape.aabb.edgeMinY;
		(this2[edge1.id] = this2.pop()).id = edge1.id;
		edge1.id = null;
		var this3 = this.axisX;
		var edge2 = body.shape.aabb.edgeMaxX;
		(this3[edge2.id] = this3.pop()).id = edge2.id;
		edge2.id = null;
		var this4 = this.axisY;
		var edge3 = body.shape.aabb.edgeMaxY;
		(this4[edge3.id] = this4.pop()).id = edge3.id;
		edge3.id = null;
	}
	,updatePairs: function() {
		var sumX = 0;
		var ptX = 0;
		rigid_dynamics_collision_broadphase_sweepandprune__$AABBEdgeList_AABBEdgeList_$Impl_$.sort(this.axisX);
		var e = HxOverrides.iter(this.axisX);
		while(e.hasNext()) {
			var e1 = e.next();
			switch(e1.entry) {
			case false:
				--ptX;
				break;
			case true:
				sumX += ptX;
				++ptX;
				break;
			}
		}
		var sumY = 0;
		var ptY = 0;
		rigid_dynamics_collision_broadphase_sweepandprune__$AABBEdgeList_AABBEdgeList_$Impl_$.sort(this.axisY);
		var e2 = HxOverrides.iter(this.axisY);
		while(e2.hasNext()) {
			var e3 = e2.next();
			switch(e3.entry) {
			case false:
				--ptY;
				break;
			case true:
				sumY += ptY;
				++ptY;
				break;
			}
		}
		var axis = sumX < sumY ? this.axisX : this.axisY;
		this.activeAABBs[0] = axis[0].aabb;
		var _g = 1;
		var _g1 = axis.length;
		while(_g < _g1) {
			var i = _g++;
			var aabb1 = axis[i].aabb;
			if(axis[i].entry) {
				var _g2 = 0;
				var _g11 = this.activeAABBs;
				while(_g2 < _g11.length) {
					var aabb2 = _g11[_g2];
					++_g2;
					if(aabb1.edgeMinX.pos < aabb2.edgeMaxX.pos && aabb2.edgeMinX.pos < aabb1.edgeMaxX.pos && aabb1.edgeMinY.pos < aabb2.edgeMaxY.pos && aabb2.edgeMinY.pos < aabb1.edgeMaxY.pos) {
						var pair = new rigid_dynamics_collision_Pair();
						pair.s1 = aabb1.shape;
						pair.s2 = aabb2.shape;
						if(this.pairs == null) {
							this.pairs = pair;
						} else {
							this.pairs.prev = pair;
							pair.next = this.pairs;
							this.pairs = pair;
						}
						this.numPairs++;
					}
				}
				this.activeAABBs.push(aabb1);
			} else {
				HxOverrides.remove(this.activeAABBs,aabb1);
			}
		}
	}
	,__class__: rigid_dynamics_collision_broadphase_sweepandprune_SweepAndPruneBroadPhase
});
var rigid_dynamics_collision_narrowphase_Detector = function() {
};
rigid_dynamics_collision_narrowphase_Detector.__name__ = true;
rigid_dynamics_collision_narrowphase_Detector.prototype = {
	__class__: rigid_dynamics_collision_narrowphase_Detector
};
var rigid_dynamics_collision_narrowphase_DetectorImpl = function() {
};
rigid_dynamics_collision_narrowphase_DetectorImpl.__name__ = true;
rigid_dynamics_collision_narrowphase_DetectorImpl.prototype = {
	detect: function(b1,b2) {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,__class__: rigid_dynamics_collision_narrowphase_DetectorImpl
};
var rigid_dynamics_collision_narrowphase_NarrowPhase = function() {
	this.detector = new rigid_dynamics_collision_narrowphase_Detector();
	this.sphereSphereDetector = new rigid_dynamics_collision_narrowphase_SphereSphereDetector();
};
rigid_dynamics_collision_narrowphase_NarrowPhase.__name__ = true;
rigid_dynamics_collision_narrowphase_NarrowPhase.prototype = {
	__class__: rigid_dynamics_collision_narrowphase_NarrowPhase
};
var rigid_dynamics_collision_narrowphase_SphereSphereDetector = function() {
	rigid_dynamics_collision_narrowphase_DetectorImpl.call(this);
};
rigid_dynamics_collision_narrowphase_SphereSphereDetector.__name__ = true;
rigid_dynamics_collision_narrowphase_SphereSphereDetector.__super__ = rigid_dynamics_collision_narrowphase_DetectorImpl;
rigid_dynamics_collision_narrowphase_SphereSphereDetector.prototype = $extend(rigid_dynamics_collision_narrowphase_DetectorImpl.prototype,{
	detect: function(b1,b2) {
		var v1 = b1.transform.q;
		var v2 = b2.transform.q;
		var d_x = v1.x - v2.x;
		var d_y = v1.y - v2.y;
		var r1 = (js_Boot.__cast(b1.shape , rigid_dynamics_body_shape_SphereShape)).radius;
		var r2 = (js_Boot.__cast(b2.shape , rigid_dynamics_body_shape_SphereShape)).radius;
		var ll = d_x * d_x + d_y * d_y;
		if((r1 + r2) * (r1 + r2) > ll && ll > 0) {
			var cc = new rigid_dynamics_constraint_ContactConstraint(b1,b2);
			var s = Math.sqrt(ll);
			var this1 = { x : d_x / s, y : d_y / s};
			var n = this1;
			cc.n = n;
			cc.penetration = r1 + r2 - Math.sqrt(ll);
			var s1 = -r1;
			var this2 = { x : n.x * s1, y : n.y * s1};
			cc.rq1 = this2;
			var this3 = { x : n.x * r2, y : n.y * r2};
			cc.rq2 = this3;
			return haxe_ds_Option.Some(cc);
		} else {
			return haxe_ds_Option.None;
		}
	}
	,__class__: rigid_dynamics_collision_narrowphase_SphereSphereDetector
});
var rigid_dynamics_constraint_BallConstraint = $hx_exports["RHEI"]["BallConstraint"] = function() {
};
rigid_dynamics_constraint_BallConstraint.__name__ = true;
rigid_dynamics_constraint_BallConstraint.prototype = {
	__class__: rigid_dynamics_constraint_BallConstraint
};
var rigid_dynamics_constraint_Constraint = $hx_exports["RHEI"]["Constraint"] = function() { };
rigid_dynamics_constraint_Constraint.__name__ = true;
rigid_dynamics_constraint_Constraint.prototype = {
	presolve: function(dt) {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,solveMoment: function() {
		throw new js__$Boot_HaxeError("Not Implemented.");
	}
	,__class__: rigid_dynamics_constraint_Constraint
};
var rigid_dynamics_constraint_ContactConstraint = $hx_exports["RHEI"]["ContactConstraint"] = function(b1,b2) {
	this.p1 = b1.transform;
	this.p2 = b2.transform;
	this.relaxation = 1.0;
	this.repetition = 2;
};
rigid_dynamics_constraint_ContactConstraint.__name__ = true;
rigid_dynamics_constraint_ContactConstraint.__super__ = rigid_dynamics_constraint_Constraint;
rigid_dynamics_constraint_ContactConstraint.prototype = $extend(rigid_dynamics_constraint_Constraint.prototype,{
	presolve: function(dt) {
		var this1 = { x : -this.n.y, y : this.n.x};
		this.t = this1;
		this.friction = 0.1;
		this.restitution = 0.8;
		this.threshold = 0.2;
		var b_ = this.p1.m;
		var a_ = b_ == 0 ? 0 : 1 / b_;
		var im1 = a_;
		var b_1 = this.p2.m;
		var a_1 = b_1 == 0 ? 0 : 1 / b_1;
		var im2 = a_1;
		var b_2 = this.p1.i;
		var a_2 = b_2 == 0 ? 0 : 1 / b_2;
		var ii1 = a_2;
		var b_3 = this.p2.i;
		var a_3 = b_3 == 0 ? 0 : 1 / b_3;
		var ii2 = a_3;
		var tmp;
		if(im1 != 0.0 && im2 != 0.0) {
			var a_4 = im1;
			var a_5 = a_4 + im2;
			var a_6 = ii1;
			var v1 = this.rq1;
			var v2 = this.n;
			var v11 = this.rq1;
			var v21 = this.n;
			var a_7 = a_5 + a_6 * ((v1.x * v2.y - v1.y * v2.x) * (v11.x * v21.y - v11.y * v21.x));
			var a_8 = ii2;
			var v12 = this.rq2;
			var v22 = this.n;
			var v13 = this.rq2;
			var v23 = this.n;
			var b_4 = a_7 + a_8 * ((v12.x * v22.y - v12.y * v22.x) * (v13.x * v23.y - v13.y * v23.x));
			var a_9 = b_4 == 0 ? 0 : 1 / b_4;
			tmp = a_9;
		} else {
			tmp = 0.0;
		}
		this.EffectiveMassN = tmp;
		var tmp1;
		if(im1 != 0.0 && im2 != 0.0) {
			var a_10 = im1;
			var a_11 = a_10 + im2;
			var a_12 = ii1;
			var v14 = this.rq1;
			var v24 = this.t;
			var v15 = this.rq1;
			var v25 = this.t;
			var a_13 = a_11 + a_12 * ((v14.x * v24.y - v14.y * v24.x) * (v15.x * v25.y - v15.y * v25.x));
			var a_14 = ii2;
			var v16 = this.rq2;
			var v26 = this.t;
			var v17 = this.rq2;
			var v27 = this.t;
			var b_5 = a_13 + a_14 * ((v16.x * v26.y - v16.y * v26.x) * (v17.x * v27.y - v17.y * v27.x));
			var a_15 = b_5 == 0 ? 0 : 1 / b_5;
			tmp1 = a_15;
		} else {
			tmp1 = 0.0;
		}
		this.EffectiveMassT = tmp1;
		var a_16 = ii1;
		var v18 = this.rq1;
		var v28 = this.n;
		var v19 = this.rq1;
		var v29 = this.t;
		var a_17 = a_16 * ((v18.x * v28.y - v18.y * v28.x) * (v19.x * v29.y - v19.y * v29.x));
		var a_18 = ii2;
		var v110 = this.rq2;
		var v210 = this.n;
		var v111 = this.rq2;
		var v211 = this.t;
		this.EffectiveIMass = a_17 + a_18 * ((v110.x * v210.y - v110.y * v210.x) * (v111.x * v211.y - v111.y * v211.x));
		var v = this.p1.p;
		var v1_x = v.x * im1;
		var v1_y = v.y * im1;
		var v3 = this.p2.p;
		var v2_x = v3.x * im2;
		var v2_y = v3.y * im2;
		var v1_x1 = v1_x - v2_x;
		var v1_y1 = v1_y - v2_y;
		var v212 = this.n;
		var v4 = this.rq1;
		var s = this.p1.pa;
		var v_x = v4.x * s;
		var v_y = v4.y * s;
		var v1_x2 = v_x * ii1;
		var v1_y2 = v_y * ii1;
		var v5 = this.rq2;
		var s1 = this.p2.pa;
		var v_x1 = v5.x * s1;
		var v_y1 = v5.y * s1;
		var v2_x1 = v_x1 * ii2;
		var v2_y1 = v_y1 * ii2;
		var v1_x3 = v1_x2 - v2_x1;
		var v1_y3 = v1_y2 - v2_y1;
		var v213 = this.n;
		this.relativeVelN = v1_x1 * v212.x + v1_y1 * v212.y + (v1_x3 * v213.y - v1_y3 * v213.x);
		var v6 = this.p1.p;
		var v1_x4 = v6.x * im1;
		var v1_y4 = v6.y * im1;
		var v7 = this.p2.p;
		var v2_x2 = v7.x * im2;
		var v2_y2 = v7.y * im2;
		var v1_x5 = v1_x4 - v2_x2;
		var v1_y5 = v1_y4 - v2_y2;
		var v214 = this.t;
		var v8 = this.rq1;
		var s2 = this.p1.pa;
		var v_x2 = v8.x * s2;
		var v_y2 = v8.y * s2;
		var v1_x6 = v_x2 * ii1;
		var v1_y6 = v_y2 * ii1;
		var v9 = this.rq2;
		var s3 = this.p2.pa;
		var v_x3 = v9.x * s3;
		var v_y3 = v9.y * s3;
		var v2_x3 = v_x3 * ii2;
		var v2_y3 = v_y3 * ii2;
		var v1_x7 = v1_x6 - v2_x3;
		var v1_y7 = v1_y6 - v2_y3;
		var v215 = this.t;
		this.relativeVelT = v1_x5 * v214.x + v1_y5 * v214.y + (v1_x7 * v215.y - v1_y7 * v215.x);
		this.impulseN = this.EffectiveMassN * this.relativeVelN;
		this.impulseT = this.EffectiveMassT * this.relativeVelT;
	}
	,solveMoment: function() {
		var oldImpulseN = 0.0;
		var oldImpulseT = 0.0;
		var _g = 0;
		var _g1 = this.repetition;
		while(_g < _g1) {
			var i = _g++;
			var e = -this.relativeVelN > this.threshold ? this.restitution : 0;
			this.impulseN = -this.relaxation * (this.EffectiveIMass * this.impulseT + (1 + e) * this.relativeVelN) * this.EffectiveMassN;
			this.impulseN = Math.max(this.impulseN,0.0);
			this.impulseT = -this.relaxation * (this.EffectiveIMass * this.impulseN + this.relativeVelT) * this.EffectiveMassT;
			this.impulseT = Math.min(Math.max(this.impulseT,-this.friction * this.impulseN),this.friction * this.impulseN);
			var deltaImpulseN = this.impulseN - oldImpulseN;
			var deltaImpulseT = this.impulseT - oldImpulseT;
			var v1 = this.p1.p;
			var v = this.n;
			var v1_x = v.x * deltaImpulseN;
			var v1_y = v.y * deltaImpulseN;
			var v2 = this.t;
			var v2_x = v2.x * deltaImpulseT;
			var v2_y = v2.y * deltaImpulseT;
			var v2_x1 = v1_x + v2_x;
			var v2_y1 = v1_y + v2_y;
			var this1 = { x : v1.x + v2_x1, y : v1.y + v2_y1};
			this.p1.p = this1;
			var v11 = this.rq1;
			var v21 = this.n;
			var v12 = this.rq1;
			var v22 = this.t;
			this.p1.pa += deltaImpulseN * (v11.x * v21.y - v11.y * v21.x) + deltaImpulseT * (v12.x * v22.y - v12.y * v22.x);
			var v13 = this.p2.p;
			var v3 = this.n;
			var v1_x1 = v3.x * deltaImpulseN;
			var v1_y1 = v3.y * deltaImpulseN;
			var v4 = this.t;
			var v2_x2 = v4.x * deltaImpulseT;
			var v2_y2 = v4.y * deltaImpulseT;
			var v2_x3 = v1_x1 + v2_x2;
			var v2_y3 = v1_y1 + v2_y2;
			var this2 = { x : v13.x - v2_x3, y : v13.y - v2_y3};
			this.p2.p = this2;
			var v14 = this.rq2;
			var v23 = this.n;
			var v15 = this.rq2;
			var v24 = this.t;
			this.p2.pa -= deltaImpulseN * (v14.x * v23.y - v14.y * v23.x) + deltaImpulseT * (v15.x * v24.y - v15.y * v24.x);
			oldImpulseN = this.impulseN;
			oldImpulseT = this.impulseT;
		}
	}
	,__class__: rigid_dynamics_constraint_ContactConstraint
});
var rigid_dynamics_constraint_CylindricalConstraint = $hx_exports["RHEI"]["CylindricalConstraint"] = function(b1,b2,n) {
	this.p1 = b1.transform;
	this.p2 = b2.transform;
	this.relaxation = 1.0;
	this.repetition = 50;
	this.o = 1e5;
	this.z = 1.0;
	var s = Math.sqrt(n.x * n.x + n.y * n.y);
	var this1 = { x : n.x / s, y : n.y / s};
	this.n = this1;
};
rigid_dynamics_constraint_CylindricalConstraint.__name__ = true;
rigid_dynamics_constraint_CylindricalConstraint.__super__ = rigid_dynamics_constraint_Constraint;
rigid_dynamics_constraint_CylindricalConstraint.prototype = $extend(rigid_dynamics_constraint_Constraint.prototype,{
	presolve: function(dt) {
		var this1 = { x : 0.0, y : 0.0};
		this.rq1 = this1;
		var this2 = { x : 0.0, y : 0.0};
		this.rq2 = this2;
		var v1 = this.p1.q;
		var v2 = this.rq1;
		var v1_x = v1.x + v2.x;
		var v1_y = v1.y + v2.y;
		var v11 = this.p2.q;
		var v21 = this.rq2;
		var v2_x = v11.x + v21.x;
		var v2_y = v11.y + v21.y;
		var d_x = v1_x - v2_x;
		var d_y = v1_y - v2_y;
		var ll = d_x * d_x + d_y * d_y;
		var b_ = this.p1.m;
		var a_ = b_ == 0 ? 0 : 1 / b_;
		var im1 = a_;
		var b_1 = this.p2.m;
		var a_1 = b_1 == 0 ? 0 : 1 / b_1;
		var im2 = a_1;
		var this3 = { x : -this.n.y, y : this.n.x};
		this.t = this3;
		var a_2 = im1;
		var b_2 = a_2 + im2;
		var a_3 = b_2 == 0 ? 0 : 1 / b_2;
		this.EffectiveMassT = a_3;
		var v = this.p1.p;
		var v1_x1 = v.x * im1;
		var v1_y1 = v.y * im1;
		var v3 = this.p2.p;
		var v2_x1 = v3.x * im2;
		var v2_y1 = v3.y * im2;
		var v1_x2 = v1_x1 - v2_x1;
		var v1_y2 = v1_y1 - v2_y1;
		var v22 = this.t;
		this.relativeVelT = v1_x2 * v22.x + v1_y2 * v22.y;
		this.impulseT = -(this.EffectiveMassT * this.relativeVelT);
		this.beta = this.o / (2 * this.z + this.o * dt);
		this.gamma = this.beta / (this.EffectiveMassT * this.o * this.o);
	}
	,solveMoment: function() {
		var oldImpulseT = 0.0;
		var _g = 0;
		var _g1 = this.repetition;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.p1.q;
			var v2 = this.rq1;
			var v1_x = v1.x + v2.x;
			var v1_y = v1.y + v2.y;
			var v11 = this.p2.q;
			var v21 = this.rq2;
			var v2_x = v11.x + v21.x;
			var v2_y = v11.y + v21.y;
			var v1_x1 = v1_x - v2_x;
			var v1_y1 = v1_y - v2_y;
			var v22 = this.t;
			var soft = this.relativeVelT + this.beta * (v1_x1 * v22.x + v1_y1 * v22.y) + this.gamma * this.impulseT;
			this.impulseT = -this.relaxation * soft * this.EffectiveMassT;
			var deltaImpulseT = this.impulseT - oldImpulseT;
			var v12 = this.p1.p;
			var v = this.t;
			var v2_x1 = v.x * deltaImpulseT;
			var v2_y1 = v.y * deltaImpulseT;
			var this1 = { x : v12.x + v2_x1, y : v12.y + v2_y1};
			this.p1.p = this1;
			var v13 = this.p2.p;
			var v3 = this.t;
			var v2_x2 = v3.x * deltaImpulseT;
			var v2_y2 = v3.y * deltaImpulseT;
			var this2 = { x : v13.x - v2_x2, y : v13.y - v2_y2};
			this.p2.p = this2;
			oldImpulseT = this.impulseT;
		}
	}
	,__class__: rigid_dynamics_constraint_CylindricalConstraint
});
var rigid_dynamics_constraint_DistanceConstraint = $hx_exports["RHEI"]["DistanceConstraint"] = function(b1,b2) {
	this.p1 = b1.transform;
	this.p2 = b2.transform;
	this.relaxation = 1.0;
	this.repetition = 50;
	this.o = 100.0;
	this.z = 1.0;
	var v1 = this.p1.q;
	var v2 = this.p2.q;
	var d_x = v1.x - v2.x;
	var d_y = v1.y - v2.y;
	this.distance = Math.sqrt(d_x * d_x + d_y * d_y);
};
rigid_dynamics_constraint_DistanceConstraint.__name__ = true;
rigid_dynamics_constraint_DistanceConstraint.__super__ = rigid_dynamics_constraint_Constraint;
rigid_dynamics_constraint_DistanceConstraint.prototype = $extend(rigid_dynamics_constraint_Constraint.prototype,{
	presolve: function(dt) {
		var this1 = { x : 0.0, y : 0.0};
		this.rq1 = this1;
		var this2 = { x : 0.0, y : 0.0};
		this.rq2 = this2;
		var v1 = this.p1.q;
		var v2 = this.rq1;
		var v1_x = v1.x + v2.x;
		var v1_y = v1.y + v2.y;
		var v11 = this.p2.q;
		var v21 = this.rq2;
		var v2_x = v11.x + v21.x;
		var v2_y = v11.y + v21.y;
		var d_x = v1_x - v2_x;
		var d_y = v1_y - v2_y;
		var ll = d_x * d_x + d_y * d_y;
		var b_ = this.p1.m;
		var a_ = b_ == 0 ? 0 : 1 / b_;
		var im1 = a_;
		var b_1 = this.p2.m;
		var a_1 = b_1 == 0 ? 0 : 1 / b_1;
		var im2 = a_1;
		var s = 1 / Math.sqrt(ll);
		var this3 = { x : d_x * s, y : d_y * s};
		this.n = this3;
		var a_2 = im1;
		var b_2 = a_2 + im2;
		var a_3 = b_2 == 0 ? 0 : 1 / b_2;
		this.EffectiveMassN = a_3;
		var v = this.p1.p;
		var v1_x1 = v.x * im1;
		var v1_y1 = v.y * im1;
		var v3 = this.p2.p;
		var v2_x1 = v3.x * im2;
		var v2_y1 = v3.y * im2;
		var v1_x2 = v1_x1 - v2_x1;
		var v1_y2 = v1_y1 - v2_y1;
		var v22 = this.n;
		this.relativeVelN = v1_x2 * v22.x + v1_y2 * v22.y;
		this.impulseN = -this.EffectiveMassN * this.relativeVelN;
		this.beta = this.o / (2 * this.z + this.o * dt);
		this.gamma = this.beta / (this.EffectiveMassN * this.o * this.o);
	}
	,solveMoment: function() {
		var oldImpulseN = 0.0;
		var _g = 0;
		var _g1 = this.repetition;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.p1.q;
			var v2 = this.rq1;
			var v1_x = v1.x + v2.x;
			var v1_y = v1.y + v2.y;
			var v11 = this.p2.q;
			var v21 = this.rq2;
			var v2_x = v11.x + v21.x;
			var v2_y = v11.y + v21.y;
			var v1_x1 = v1_x - v2_x;
			var v1_y1 = v1_y - v2_y;
			var v22 = this.n;
			var soft = this.relativeVelN + this.beta * (v1_x1 * v22.x + v1_y1 * v22.y - this.distance) + this.gamma * this.impulseN;
			this.impulseN = -this.relaxation * soft * this.EffectiveMassN;
			var deltaImpulseN = this.impulseN - oldImpulseN;
			var v12 = this.p1.p;
			var v = this.n;
			var v2_x1 = v.x * deltaImpulseN;
			var v2_y1 = v.y * deltaImpulseN;
			var this1 = { x : v12.x + v2_x1, y : v12.y + v2_y1};
			this.p1.p = this1;
			var v13 = this.p2.p;
			var v3 = this.n;
			var v2_x2 = v3.x * deltaImpulseN;
			var v2_y2 = v3.y * deltaImpulseN;
			var this2 = { x : v13.x - v2_x2, y : v13.y - v2_y2};
			this.p2.p = this2;
			oldImpulseN = this.impulseN;
		}
	}
	,__class__: rigid_dynamics_constraint_DistanceConstraint
});
var rigid_dynamics_constraint_MouseConstraint = $hx_exports["RHEI"]["MouseConstraint"] = function(b,p) {
	var a = new rigid_dynamics_body_Transform();
	a.q = p;
	this.p1 = b.transform;
	this.p2 = a;
	this.relaxation = 1.0;
	this.repetition = 2;
	this.o = 10.0;
	this.z = 1.0;
	var v1 = this.p1.q;
	var v2 = this.p2.q;
	var d_x = v1.x - v2.x;
	var d_y = v1.y - v2.y;
	this.distance = Math.sqrt(d_x * d_x + d_y * d_y);
};
rigid_dynamics_constraint_MouseConstraint.__name__ = true;
rigid_dynamics_constraint_MouseConstraint.__super__ = rigid_dynamics_constraint_Constraint;
rigid_dynamics_constraint_MouseConstraint.prototype = $extend(rigid_dynamics_constraint_Constraint.prototype,{
	presolve: function(dt) {
		var this1 = { x : 0.0, y : 0.0};
		this.rq1 = this1;
		var this2 = { x : 0.0, y : 0.0};
		this.rq2 = this2;
		var v1 = this.p1.q;
		var v2 = this.rq1;
		var v1_x = v1.x + v2.x;
		var v1_y = v1.y + v2.y;
		var v11 = this.p2.q;
		var v21 = this.rq2;
		var v2_x = v11.x + v21.x;
		var v2_y = v11.y + v21.y;
		var d_x = v1_x - v2_x;
		var d_y = v1_y - v2_y;
		var ll = d_x * d_x + d_y * d_y;
		var b_ = this.p1.m;
		var a_ = b_ == 0 ? 0 : 1 / b_;
		var im1 = a_;
		var b_1 = this.p2.m;
		var a_1 = b_1 == 0 ? 0 : 1 / b_1;
		var im2 = a_1;
		var s = 1 / Math.sqrt(ll);
		var this3 = { x : d_x * s, y : d_y * s};
		this.n = this3;
		var a_2 = im1;
		var b_2 = a_2 + im2;
		var a_3 = b_2 == 0 ? 0 : 1 / b_2;
		this.EffectiveMassN = a_3;
		var v = this.p1.p;
		var v1_x1 = v.x * im1;
		var v1_y1 = v.y * im1;
		var v3 = this.p2.p;
		var v2_x1 = v3.x * im2;
		var v2_y1 = v3.y * im2;
		var v1_x2 = v1_x1 - v2_x1;
		var v1_y2 = v1_y1 - v2_y1;
		var v22 = this.n;
		this.relativeVelN = v1_x2 * v22.x + v1_y2 * v22.y;
		this.impulseN = -this.EffectiveMassN * this.relativeVelN;
		this.beta = this.o / (2 * this.z + this.o * dt);
		this.gamma = this.beta / (this.EffectiveMassN * this.o * this.o);
	}
	,solveMoment: function() {
		var oldImpulseN = 0.0;
		var _g = 0;
		var _g1 = this.repetition;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.p1.q;
			var v2 = this.rq1;
			var v1_x = v1.x + v2.x;
			var v1_y = v1.y + v2.y;
			var v11 = this.p2.q;
			var v21 = this.rq2;
			var v2_x = v11.x + v21.x;
			var v2_y = v11.y + v21.y;
			var v1_x1 = v1_x - v2_x;
			var v1_y1 = v1_y - v2_y;
			var v22 = this.n;
			this.soft = this.relativeVelN + this.beta * (v1_x1 * v22.x + v1_y1 * v22.y - this.distance) + this.gamma * this.impulseN;
			this.impulseN = -this.relaxation * this.soft * this.EffectiveMassN;
			var deltaImpulseN = this.impulseN - oldImpulseN;
			var v12 = this.p1.p;
			var v = this.n;
			var v2_x1 = v.x * deltaImpulseN;
			var v2_y1 = v.y * deltaImpulseN;
			var this1 = { x : v12.x + v2_x1, y : v12.y + v2_y1};
			this.p1.p = this1;
			var v13 = this.rq1;
			var v23 = this.n;
			this.p1.pa += deltaImpulseN * (v13.x * v23.y - v13.y * v23.x);
			oldImpulseN = this.impulseN;
		}
	}
	,__class__: rigid_dynamics_constraint_MouseConstraint
});
var util_Statistics = $hx_exports["RHEI"]["Statistics"] = function() { };
util_Statistics.__name__ = true;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
rigid_common_MathUtil.PI = 3.14159265358979;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
